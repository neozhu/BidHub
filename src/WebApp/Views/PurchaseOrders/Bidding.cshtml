@model WebApp.Models.PurchaseOrder
@{
    ViewBag.Title = "投标";
}
<!-- MAIN CONTENT -->
  <div id="content">
    <!-- quick navigation bar -->
    <div class="row">
      <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
        <h1 class="page-title txt-color-blueDark">
          <i class="fa fa-table fa-fw "></i>
          供应商
          <span>
            >
            投标
          </span>
        </h1>
      </div>
      <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">

      </div>
    </div>
    <!-- end quick navigation bar -->
    <!-- widget grid -->
    <section id="widget-grid" class="">
      <!-- row -->
      <div class="row">
        <!-- NEW WIDGET START -->
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
          <!-- Widget ID (each widget will need unique ID)-->
          <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-deletebutton="false">
            <!-- widget options:
          usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
          data-widget-colorbutton="false"
          data-widget-editbutton="false"
          data-widget-togglebutton="false"
          data-widget-deletebutton="false"
          data-widget-fullscreenbutton="false"
          data-widget-custombutton="false"
          data-widget-collapsed="true"
          data-widget-sortable="false"
          -->
            <header>
              <span class="widget-icon"> <i class="fa fa-table"></i> </span>
              <h2>投标</h2>
            </header>

            <!-- widget div-->
            <div>
              <!-- widget edit box -->
              <div class="jarviswidget-editbox">
                <!-- This area used as dropdown edit box -->
              </div>
              <!-- end widget edit box -->
              <!-- widget content -->
              <div class="widget-body no-padding">
                <div class="sk-spinner sk-spinner-wave">
                  <div class="sk-rect1"></div>
                  <div class="sk-rect2"></div>
                  <div class="sk-rect3"></div>
                  <div class="sk-rect4"></div>
                  <div class="sk-rect5"></div>
                </div>
                <div class="widget-body-toolbar">
                  <div class="row">
                    <div class="col-sm-8  ">
                      <!-- 开启授权控制请参考 @@if (Html.IsAuthorize("Create") -->
                      <div class="btn-group btn-group-sm">
                        <button onclick="bidding()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="出价"> <i class="fa fa-gavel"></i> 出价 </button>
                      </div>



                      <div class="btn-group btn-group-sm">
                        <button onclick="reload()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Refresh")"> <i class="fa fa-refresh"></i> @Html.L("Refresh") </button>
                      </div>

                    </div>
                    <div class="col-sm-4 text-align-right visible-lg-inline-block">
                      <div class="btn-group btn-group-sm">
                        <button onclick="window.history.back()" class="btn btn-sm btn-success" data-rel="tooltip" data-placement="bottom" title="@Html.L("GoBack")"> <i class="fa fa-chevron-left"></i> @Html.L("GoBack") </button>
                      </div>
                    </div>
                  </div>

                </div>
                <div class="alert alert-warning no-margin fade in">
                  <button class="close" data-dismiss="alert">
                    ×
                  </button>
                  <i class="fa-fw fa fa-info"></i>
                  注意事项:
                </div>
                <!--begin datagrid-content -->
                <div class="table-responsive">
                  <table id="orderbidding_datagrid">
                  </table>
                </div>
                <!--end datagrid-content -->
              </div>
              <!-- end widget content -->
            </div>
            <!-- end widget div -->
          </div>
          <!-- end widget -->
        </article>
        <!-- WIDGET END -->
      </div>
      <!-- end row -->
    </section>
    <!-- end widget grid -->
    <!-- file upload partial view -->
    <!-- RenderPartial() does exactly the same thing and is better for performance over Partial() -->
    @{ Html.RenderPartial("_ImportWindow", new ViewDataDictionary { { "EntityName", "PurchaseOrder" } }); }
    <!-- end file upload partial view -->
    <!-- detail popup window -->
  
    @{ Html.RenderPartial("_PopupBatchBidFormView", new WebApp.Models.ViewModel.BidViewModel()); }
    <!-- end detail popup window -->

  </div>
<!-- END MAIN CONTENT -->

@section Scripts {
  <script src="@Fingerprint.Tag("/Scripts/smartadmin.easyui.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/columns-reset.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.easyui.component.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.extend.formatter.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/locale/easyui-lang-zh_CN.js")"></script>
<script type="text/javascript">
      //是否强制从后台取值s
      const REQUIRBACKEND = false;
      //是否开启行内编辑
      const EDITINLINE = false;
      var purchaseorder = {};
      //发标
  function bidding() {
    const selected = $dg.datagrid('getChecked').filter(item =>  remdays(item.DueDate).days > 0).map(item => {
      return item;
    });;
    if (selected.length > 0) {
      openbatchbidwindow(selected);
    } else {
      $.messager.alert('提示', '请先选择要【发标中】的记录!', 'question');
    }
  }
      //下载Excel导入模板
      function downloadtemplate() {
          //默认模板路径存放位置
          const url = '/FileUpload/Download?file=/ExcelTemplate/PurchaseOrder.xlsx';
          $.fileDownload(url)
           .done(() => {
                    //console.log('file download a success!');
                    toastr.success('模板下载完成!');  
                })
           .fail(() => {
               $.messager.alert('下载模板失败','没有下载到导入模板[PurchaseOrder.xlsx]文件!','error'); 
            });           
       }
       //打印
       function print() {
            $dg.datagrid('print', 'DataGrid');
       }
       //执行导出下载Excel
       function exportexcel() {
                const filterRules = JSON.stringify($dg.datagrid('options').filterRules);
                //console.log(filterRules);
                $.messager.progress({ title: '正在执行导出!' });
                let formData = new FormData();
                formData.append('filterRules', filterRules);
                formData.append('sort', 'Id');
                formData.append('order', 'asc');
                $.postDownload('/PurchaseOrders/ExportExcel', formData).then(res => {
                    $.messager.progress('close');
                    toastr.success('导出成功!');
                }).catch(err => {
                    //console.log(err);
                    $.messager.progress('close');
                    $.messager.alert('导出失败', err.statusText, 'error');
                });

        }
        //显示帮助信息
        function dohelp() {
            toastr.info('有问题请联系管理员 <br><i class="fa fa-envelope-o" aria-hidden="true"></i> : demo@admin.com','帮助');  
        }
       var editIndex = undefined;
       //重新加载数据
       function reload() {
            if (EDITINLINE && endEditing()) {
                $dg.datagrid('uncheckAll');
                $dg.datagrid('reload');
                 $("button[name*='deletebutton']").prop('disabled', true);
                 $("button[name*='savebutton']").prop('disabled', true);
                 $("button[name*='cancelbutton']").prop('disabled', true);
            } else if (!EDITINLINE) {
                $dg.datagrid('uncheckAll');
                $dg.datagrid('reload');
                 $("button[name*='deletebutton']").prop('disabled', true);
                 $("button[name*='savebutton']").prop('disabled', true);
                 $("button[name*='cancelbutton']").prop('disabled', true);
            }
       }
      //关闭编辑状态
      function endEditing() {
            if (editIndex === undefined) { 
                return true; 
            }
            if ($dg.datagrid('validateRow', editIndex)) {
                $dg.datagrid('endEdit', editIndex);
                return true;
            } else {
                const invalidinput = $('input.validatebox-invalid',$dg.datagrid('getPanel'));
                const fieldnames = invalidinput.map((index, item) => {
                  return $(item).attr('placeholder') || $(item).attr('id');
                });
                $.messager.alert('提示', `${Array.from(fieldnames)} 输入有误.`, 'error');
                return false;
            }
        }
    //单击列开启编辑功能
  function onClickCell(index, field) {
    purchaseorder = $dg.datagrid('getRows')[index];
    const _actions = ['action', 'ck'];
    if (!EDITINLINE || $.inArray(field, _actions) >= 0) {
      return;
    }
    if (editIndex !== index) {
      if (endEditing()) {
        $dg.datagrid('selectRow', index)
          .datagrid('beginEdit', index);
        hook = true;
        editIndex = index;
        const ed = $dg.datagrid('getEditor', { index: index, field: field });
        if (ed) {
          ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
        }
      } else {
        $dg.datagrid('selectRow', editIndex);
      }
    }
  }
    //新增记录
  async function append() {
    purchaseorder = {
      PODate: moment().format('YYYY-MM-DD HH:mm:ss'),
      Status: '待发标',
      DemandedDate: moment().format('YYYY-MM-DD HH:mm:ss'),
      BiddingDate: null,
      DueDate: null,
      ShippingDate: null,
      SO: null,
      InvoiceNo: null,
      OpenDate: null,
      ReceivedDate: null,
    };
    //需要后台创建对象
    if (REQUIRBACKEND) {
      purchaseorder = await $.get('/PurchaseOrders/NewItem');
    }
    if (!EDITINLINE) {
      //弹出新增窗口
      openpurchaseorderdetailwindow(purchaseorder, 'Added');
    } else {
      if (endEditing()) {
        //对必填字段进行默认值初始化
        $dg.datagrid('insertRow',
          {
            index: 0,
            row: purchaseorder
          });
        editIndex = 0;
        $dg.datagrid('selectRow', editIndex)
          .datagrid('beginEdit', editIndex);
        hook = true;
      }
    }
  }
    //删除编辑的行
    function removeit() {
       if (EDITINLINE) {
          if (editIndex !== undefined) { 
             $dg.datagrid('cancelEdit', editIndex)
                .datagrid('deleteRow', editIndex);
               editIndex = undefined;
               hook = true;
               $("button[name*='savebutton']").prop('disabled', false);
               $("button[name*='cancelbutton']").prop('disabled', false);
           }else{
              const rows = $dg.datagrid('getChecked');
              rows.slice().reverse().forEach(row => {
                const rowindex = $dg.datagrid('getRowIndex', row);
                $dg.datagrid('deleteRow', rowindex);
                hook = true;
                $("button[name*='savebutton']").prop('disabled', false);
                $("button[name*='cancelbutton']").prop('disabled', false);
            });
           }
        } else {
          deletechecked();
        }
    }
  //删除该行
  function deleteRow(id) {
    $.messager.confirm('确认', '你确定要删除该记录?', result => {
      if (result) {
        dodeletechecked([id]);
      }
     });  
  }
    //删除选中的行
    function deletechecked() {
        const id = $dg.datagrid('getChecked').filter(item=>item.Id!=null && item.Id > 0).map(item => {
                   return item.Id;
                });;
        if (id.length > 0) {
           $.messager.confirm('确认', `你确定要删除这 <span class='badge bg-color-red'>${id.length} </span> 行记录?`, result => {
                if (result) {
                    dodeletechecked(id);
                    }
                });  
         } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
         }
     }
    //执行删除
    function dodeletechecked(id){
       $.post('/PurchaseOrders/DeleteChecked', { id: id })
                         .done(response => {
                                if (response.success) {
                                    toastr.error(`成功删除[${id.length}]行记录`);  
                                    reload();
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
                             $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                          });
    }
    //提交保存后台数据库
    function accept() {
      if (endEditing()) {
        if ($dg.datagrid('getChanges').length > 0) {
          const inserted = $dg.datagrid('getChanges', 'inserted').map(item => {
          item.TrackingState = 1;
          return item;
        });
        const updated = $dg.datagrid('getChanges', 'updated').map(item => {
          item.TrackingState = 2
          return item;
        });
        const deleted = $dg.datagrid('getChanges', 'deleted').map(item => {
          item.TrackingState = 3
          return item;
        });
        //过滤已删除的重复项
        const changed = inserted.concat(updated.filter(item => {
            return !deleted.includes(item);
          })).concat(deleted);
        //console.table(changed);
        $.messager.progress({ title: '请等待', msg: '正在保存数据...', interval:200});
        $.post('/PurchaseOrders/SaveData', {purchaseorders:changed})
                     .done(response => {
                     $.messager.progress('close');
                           //console.log(response);
                           if (response.success) {
                               toastr.success('保存成功');  
                               $dg.datagrid('acceptChanges');
                               reload();
                               hook = false;
                           } else {
                               $.messager.alert('错误', response.err ,'error');
                           }
                        })
                      .fail((jqXHR, textStatus, errorThrown) => {
                        $.messager.progress('close');
                        $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                      });
                }
            }
    }
    function reject() {
        $dg.datagrid('rejectChanges');
        editIndex = undefined;
        hook = false;
    }
    function getChanges() {
        const rows = $dg.datagrid('getChanges');
        //console.log(rows.length + ' rows are changed!');
    }
    //弹出明细信息
  async function showdetailswindow(id, index) {
    const purchaseorder = $dg.datagrid('getRows')[index];
    if (remdays(purchaseorder.DueDate).days > 0) {
      openbatchbidwindow([purchaseorder]);
    } else {
      $.messager.alert('提示', `已超过截至日期[${moment(purchaseorder.DueDate).format('YYYY-MM-DD')}]，不允许出价`);
    }
  }

    //初始化定义datagrid
    var $dg = $('#orderbidding_datagrid');
  $(() => {
    //定义datagrid结构
    $dg.datagrid({
      rownumbers: true,
      checkOnSelect: false,
      selectOnCheck: false,
      idField: 'Id',
      sortName: 'Id',
      sortOrder: 'desc',
      remoteFilter: true,
      singleSelect: false,
      url: '/PurchaseOrders/GetBiddingData',
      method: 'get',
      onClickCell: onClickCell,
      pagination: true,
      clientPaging:false,
      striped: true,
      pageList: [10, 20, 50, 100, 500],
      onHeaderContextMenu: function (e, field) {
        e.preventDefault();
        $(this).datagrid('columnMenu').menu('show', {
          left: e.pageX,
          top: e.pageY
        });
      },
      onBeforeLoad: function () {
        //datagrid resize when jarvisWidgets resized.
        const that = $(this);
        $(window).on("resize.jarvisWidgets", () => {
          that.datagrid('resize');
        })
      },
      onLoadSuccess: function (data) {
        editIndex = undefined;
        $('[data-toggle="tooltip"]').tooltip();
      },
      onCheck: function () {
        $("button[name*='deletebutton']").prop('disabled', false);
      },
      onUncheck: function () {
        const checked = $(this).datagrid('getChecked').length > 0;
        $("button[name*='deletebutton']").prop('disabled', !checked);
      },
      onSelect: function (index, row) {
        purchaseorder = row;
      },
      onBeginEdit: function (index, row) {
        //const editors = $(this).datagrid('getEditors', index);

      },
      onEndEdit: function (index, row) {

      },
      onBeforeEdit: function (index, row) {
        editIndex = index;
        row.editing = true;
        $("button[name*='deletebutton']").prop('disabled', false);
        $("button[name*='cancelbutton']").prop('disabled', false);
        $("button[name*='savebutton']").prop('disabled', false);
        $(this).datagrid('refreshRow', index);
      },
      onAfterEdit: function (index, row) {
        row.editing = false;
        editIndex = undefined;
        $(this).datagrid('refreshRow', index);
      },
      onCancelEdit: function (index, row) {
        row.editing = false;
        editIndex = undefined;
        $("button[name*='deletebutton']").prop('disabled', true);
        $("button[name*='savebutton']").prop('disabled', true);
        $("button[name*='cancelbutton']").prop('disabled', true);
        $(this).datagrid('refreshRow', index);
      },
      frozenColumns: [[
        /*开启CheckBox选择功能*/
        { field: 'ck', checkbox: true },
        {
          field: 'action',
          title: '@Html.L("Command")',
          width: 55,
          sortable: false,
          resizable: true,
          formatter: function showdetailsformatter(value, row, index) {
            if (row.Status=='发标中') {

              return `<div class="btn-group">\
                           <button onclick="showdetailswindow('${row.Id}',  ${index})" class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="right" title="出价" ><i class="fa fa-gavel"></i> </button>\
                        </div>`;

            } else {
              return `<button  disabled class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="right" title="禁止出价" ><i class="fa fa-gavel"></i> </button>`;
            }
          }
        }
      ]],
       columns: [[
        { /*Id*/
          field: 'Id',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Id)</span>',
          width: 120,
          sortable: true,
          resizable: true,
          hidden: true
        },
         {    /*状态*/
          field: 'Status',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Status)</span>',
          width: 90,
          align: 'right',
          hidden: false,
          editor: {
            /*需要在键值对中维护status枚举值并生成JavaScript才能使用*/
            type: 'statuseditor',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Status)',
              required: true
            }
          },
          formatter: statusformatter
        },
         {
          field: 'State',
          title: '<span class="required-green">提示</span>',
          width: 140,
          align: 'right',
           formatter: function (v, r, i) {
             if (r.Status == '发标中') {
               return remdays(r.DueDate).text;
             } else if (r.Status == '待处理') {
               return '等待发标'
             } else if (r.Status == '开标中') {
               return '等待开标'
             }else if (r.Status == '发货中') {
               return '等待验收'
             }else if (r.Status == '结案中') {
               return '等待财务确认'
             }else if (r.Status == '已结案') {
               return '完成'
             }
          },
          styler: function (v, r, index) {
            if (r.Status == '发标中') {
              if (remdays(r.DueDate).days <= 2 && remdays(r.DueDate).days > 0) {
                return 'background-color:#D84315;color:#fff;';
                // the function can return predefined css class and inline style
                // return {class:'c1',style:'color:red'}
              } else if (remdays(r.DueDate).days == 0) {
                return 'background-color:#2E7D32;color:#FFF;';
              }
              else {
                return 'background-color:#40C4FF;color:#000;';
              }
            } else if (r.Status == '开标中') {
              return 'background-color:#EEEEEE;color:#000;';
            }
          },
         },
         {
           field: 'Bidedate',
           title: '<span class="required-green">投标时间</span>',
           width: 100,
           formatter:dateformatter
         },
         {
           field: 'BiddingPrice',
           title: '<span class="required-green">投标价</span>',
           width: 100,
           formatter:numberformatter
         },
         
        {    /*采购单号*/
          field: 'PO',
          title: '<span class="required">@Html.DisplayNameFor(model => model.PO)</span>',
          width: 120,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.PO)', required: true, validType: 'length[0,20]' }
          },
          sortable: true,
          resizable: true
         },
        {    /*科研号*/
          field: 'GrantNo',
          title: '<span class="required">@Html.DisplayNameFor(model => model.GrantNo)</span>',
          width: 120,
          sortable: true,
          resizable: true
        },
        {    /*序号*/
          field: 'LineNum',
          title: '<span class="required">@Html.DisplayNameFor(model => model.LineNum)</span>',
          width: 65,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.LineNum)', required: true, validType: 'length[0,3]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*品名*/
          field: 'ProductName',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ProductName)</span>',
          width: 200,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ProductName)', required: true, validType: 'length[0,100]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*规格*/
          field: 'Spec',
          title: '@Html.DisplayNameFor(model => model.Spec)',
          width: 150,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.Spec)', required: false, validType: 'length[0,100]' }
          },
          sortable: true,
          resizable: true
        },
         {    /*参数*/
          field: 'Feature',
          title: '@Html.DisplayNameFor(model => model.Feature)',
          width: 200,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.Feature)', required: false, validType: 'length[0,100]' }
          },
          sortable: true,
          resizable: true
        },
         {    /*品牌*/
          field: 'BrandName',
          title: '@Html.DisplayNameFor(model => model.BrandName)',
          width: 150,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.BrandName)', required: false, validType: 'length[0,100]' }
          },
          sortable: true,
          resizable: true
        },
         {    /*货号*/
          field: 'ProductNo',
          title: '@Html.DisplayNameFor(model => model.ProductNo)',
          width: 120,
          hidden: true,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ProductNo)', required: false, validType: 'length[0,50]' }
          },
          sortable: true,
          resizable: true
        },
        
        
        {    /*单位*/
          field: 'Unit',
          title: '@Html.DisplayNameFor(model => model.Unit)',
          width: 60,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.Unit)', required: false, validType: 'length[0,10]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*数量*/
          field: 'Qty',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Qty)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Qty)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        
       
        {    /*备注*/
          field: 'Description',
          title: '@Html.DisplayNameFor(model => model.Description)',
          width: 200,
          hidden: false,
          sortable: true,
          resizable: true,
          formatter: function (v, r, i) {
            if (r.Reason) {
              return `${v}(${r.Reason})`
            } else {
              return v;
            }
          }
        },
        {   /*要求到货日期*/
          field: 'DemandedDate',
          title: '@Html.DisplayNameFor(model => model.DemandedDate)',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.DemandedDate)', required: false }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },
        @*{    /*控制价*/
          field: 'ControlledPrice',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ControlledPrice)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.ControlledPrice)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },*@
        @*{     /*竞标人数*/
          field: 'BiddingUsers',
          title: '<span class="required">@Html.DisplayNameFor(model => model.BiddingUsers)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.BiddingUsers)',
              required: true,

            }
          },
          formatter: intformatter,
          sortable: true,
          resizable: true
        },
        {     /*出价次数*/
          field: 'BiddingTime',
          title: '<span class="required">@Html.DisplayNameFor(model => model.BiddingTime)</span>',
          width: 100,
          align: 'right',
          hidden: true,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.BiddingTime)',
              required: true,

            }
          },
          formatter: intformatter,
          sortable: true,
          resizable: true
        },
        
        {    /*最低价*/
          field: 'MinPrice',
          title: '<span class="required">@Html.DisplayNameFor(model => model.MinPrice)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.MinPrice)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*最高价*/
          field: 'MaxPrice',
          title: '<span class="required">@Html.DisplayNameFor(model => model.MaxPrice)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.MaxPrice)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*中标价格*/
          field: 'BidedPrice',
          title: '<span class="required">@Html.DisplayNameFor(model => model.BidedPrice)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.BidedPrice)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*中标供应商*/
          field: 'SupplierName',
          title: '@Html.DisplayNameFor(model => model.SupplierName)',
          width: 200,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.SupplierName)', required: false, validType: 'length[0,50]' }
          },
          sortable: true,
          resizable: true
        },*@
        {    /*业务联系人*/
          field: 'Buyer',
          title: '@Html.DisplayNameFor(model => model.Buyer)',
          width: 120,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.Buyer)', required: false, validType: 'length[0,20]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*联系人电话*/
          field: 'BuyerPhone',
          title: '@Html.DisplayNameFor(model => model.BuyerPhone)',
          width: 200,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.BuyerPhone)', required: false, validType: 'length[0,50]' }
          },
          sortable: true,
          resizable: true
        },
        {   /*发标日期*/
          field: 'BiddingDate',
          title: '@Html.DisplayNameFor(model => model.BiddingDate)',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.BiddingDate)', required: false }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },
        {   /*截至日期*/
          field: 'DueDate',
          title: '@Html.DisplayNameFor(model => model.DueDate)',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.DueDate)', required: false }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },
        @*{   /*下单日期*/
          field: 'PODate',
          title: '<span class="required">@Html.DisplayNameFor(model => model.PODate)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.PODate)', required: true }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },*@
       
        {   /*发货日期*/
          field: 'ShippingDate',
          title: '@Html.DisplayNameFor(model => model.ShippingDate)',
          width: 100,
          align: 'right',
          hidden: true,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ShippingDate)', required: false }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },
        {    /*出货单号*/
          field: 'SO',
          title: '@Html.DisplayNameFor(model => model.SO)',
          width: 120,
          hidden: true,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.SO)', required: false, validType: 'length[0,20]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*发票号*/
          field: 'InvoiceNo',
          title: '@Html.DisplayNameFor(model => model.InvoiceNo)',
          width: 200,
          hidden: true,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.InvoiceNo)', required: false, validType: 'length[0,50]' }
          },
          sortable: true,
          resizable: true
        },
        {   /*发货日期*/
          field: 'OpenDate',
          title: '@Html.DisplayNameFor(model => model.OpenDate)',
          width: 100,
          align: 'right',
          hidden: true,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.OpenDate)', required: false }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },
        {   /*收货日期*/
          field: 'ReceivedDate',
          title: '@Html.DisplayNameFor(model => model.ReceivedDate)',
          width: 100,
          align: 'right',
          hidden: true,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ReceivedDate)', required: false }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },
        
        
        
      ]]
    });
   
    $dg.datagrid('enableFilter', [
      /*需要在键值队维护好status枚举值*/
      {  /*状态*/
        field: 'Status',
        type: 'status2filter',
        options: {

        }
      },
      {  /*状态*/
        field: 'State',
        type:'textbox',
        options: {
          readonly:true
        }
      },
      {  /*状态*/
        field: 'Bidedate',
        type:'textbox',
        options: {
          readonly:true
        }
      },
      {  /*状态*/
        field: 'BiddingPrice',
        type:'textbox',
        options: {
          readonly:true
        }
      },
      {   /*Id*/
        field: 'Id',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*数量*/
        field: 'Qty',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*控制价*/
        field: 'ControlledPrice',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*出价次数*/
        field: 'BiddingTime',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*竞标人数*/
        field: 'BiddingUsers',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*最低价*/
        field: 'MinPrice',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*最高价*/
        field: 'MaxPrice',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*中标价格*/
        field: 'BidedPrice',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {     /*下单日期*/
        field: 'PODate',
        type: 'dateRange',
        options: {
        }
      },
      {     /*要求到货日期*/
        field: 'DemandedDate',
        type: 'dateRange',
        options: {
        }
      },
      {     /*发标日期*/
        field: 'BiddingDate',
        type: 'dateRange',
        options: {
        }
      },
      {     /*截至日期*/
        field: 'DueDate',
        type: 'dateRange',
        options: {
        }
      },
      {     /*发货日期*/
        field: 'ShippingDate',
        type: 'dateRange',
        options: {
        }
      },
      {     /*发货日期*/
        field: 'OpenDate',
        type: 'dateRange',
        options: {
        }
      },
      {     /*收货日期*/
        field: 'ReceivedDate',
        type: 'dateRange',
        options: {
        }
      },
    ]);
  });
  //计算剩余天数
    function remdays(date1) {
      var date2 = moment();

      var date1 = moment(date1);
      // The number of milliseconds in one day
      const ONE_DAY = 1000 * 60 * 60 * 24;

      // Calculate the difference in milliseconds
      const differenceMs = (date1 - date2);

      //console.log(differenceMs,Math.round(differenceMs / ONE_DAY))
      if (differenceMs > 0) {
        // Convert back to days and return
        if (Math.round(differenceMs / ONE_DAY) > 0) {
          return { days: Math.round(differenceMs / ONE_DAY), text: `还有 ${Math.round(differenceMs / ONE_DAY)} 天 结束询价` };
        } else {
          const hour = Math.round((differenceMs / (1000 * 60 * 60)) % 24);
          const min = Math.round((differenceMs / (1000 * 60)) % 60);
          console.log(hour, min)
          if (hour > 0) {
            return { days: hour, text: `还有 ${hour} 小时 结束询价` };
          } else {
            return { days: min, text: `还有 ${min} 分钟 结束询价` };
          }

        }
      } else {
        return { days: Math.round(differenceMs / ONE_DAY), text: `等待开标 ` };
      }

    }
</script>



}

 
