@model WebApp.Models.ShippingOrder
@{
  ViewBag.Title = "发货";
}
<!-- MAIN CONTENT -->
<div id="content">
  <!-- quick navigation bar -->
  <div class="row">
    <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
      <h1 class="page-title txt-color-blueDark">
        <i class="fa fa-table fa-fw "></i>
        投标操作
        <span>
          >
          发货
        </span>
      </h1>
    </div>
    <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">

    </div>
  </div>
  <!-- end quick navigation bar -->
  <!-- widget grid -->
  <section id="widget-grid" class="">
    <!-- row -->
    <div class="row">
      <!-- NEW WIDGET START -->
      <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <!-- Widget ID (each widget will need unique ID)-->
        <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-deletebutton="false">
          <!-- widget options:
          usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
          data-widget-colorbutton="false"
          data-widget-editbutton="false"
          data-widget-togglebutton="false"
          data-widget-deletebutton="false"
          data-widget-fullscreenbutton="false"
          data-widget-custombutton="false"
          data-widget-collapsed="true"
          data-widget-sortable="false"
          -->
          <header>
            <span class="widget-icon"> <i class="fa fa-table"></i> </span>
            <h2>发货</h2>
          </header>

          <!-- widget div-->
          <div>
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
              <!-- This area used as dropdown edit box -->
            </div>
            <!-- end widget edit box -->
            <!-- widget content -->
            <div class="widget-body no-padding">
              <div class="sk-spinner sk-spinner-wave">
                <div class="sk-rect1"></div>
                <div class="sk-rect2"></div>
                <div class="sk-rect3"></div>
                <div class="sk-rect4"></div>
                <div class="sk-rect5"></div>
              </div>
              <div class="widget-body-toolbar">
                <div class="row">
                  <div class="col-sm-8  ">
                    @*<div class="btn-group btn-group-sm visible-lg-inline-block" style="display:none">
                        <button onclick="shipped()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="确认发货"> <i class="fa fa-truck"></i> 确认发货 </button>
                      </div>*@
                    <div class="btn-group btn-group-sm visible-lg-inline-block" style="display:none">
                      <button onclick="print()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Print")"> <i class="fa fa-print"></i> @Html.L("Print") </button>
                    </div>
                    <div class="btn-group btn-group-sm">
                      <button onclick="reload()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Refresh")"> <i class="fa fa-refresh"></i> @Html.L("Refresh") </button>
                    </div>

                    <div class="btn-group btn-group-sm hidden-xs hidden-md">
                      <button onclick="exportexcel()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Export")"> <i class="fa fa-file-excel-o"></i> @Html.L("Export") </button>
                    </div>


                  </div>
                  <div class="col-sm-4 text-align-right visible-lg-inline-block">
                    <div class="btn-group btn-group-sm">
                      <button onclick="window.history.back()" class="btn btn-sm btn-success" data-rel="tooltip" data-placement="bottom" title="@Html.L("GoBack")"> <i class="fa fa-chevron-left"></i> @Html.L("GoBack") </button>
                    </div>
                  </div>
                </div>

              </div>
              <div class="alert alert-warning no-margin fade in">
                <button class="close" data-dismiss="alert">
                  ×
                </button>
                <i class="fa-fw fa fa-info"></i>
                注意事项:
              </div>
              <!--begin datagrid-content -->
              <div class="table-responsive">
                <table id="shippingorders_datagrid">
                </table>
              </div>
              <!--end datagrid-content -->
            </div>
            <!-- end widget content -->
          </div>
          <!-- end widget div -->
        </div>
        <!-- end widget -->
      </article>
      <!-- WIDGET END -->
    </div>
    <!-- end row -->
  </section>
  <!-- end widget grid -->
  <!-- file upload partial view -->
  <!-- RenderPartial() does exactly the same thing and is better for performance over Partial() -->
  @{ Html.RenderPartial("_ImportWindow", new ViewDataDictionary { { "EntityName", "ShippingOrder" } }); }
  <!-- end file upload partial view -->
  <!-- detail popup window -->
  @{ Html.RenderPartial("_PopupDetailFormView", new WebApp.Models.ShippingOrder()); }
  <!-- end detail popup window -->

</div>
<!-- END MAIN CONTENT -->

@section Scripts {
  <script src="~/Scripts/plugin/numeral/numeral.min.js"></script>
  <script src="@Fingerprint.Tag("/Scripts/smartadmin.easyui.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/columns-reset.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.easyui.component.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.extend.formatter.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/locale/easyui-lang-zh_CN.js")"></script>
  <script src="~/Scripts/plugin/progressbar/progressbar.min.js"></script>
  <script type="text/javascript">
      //是否强制从后台取值
      const REQUIRBACKEND = false;
      //是否开启行内编辑
      const EDITINLINE = false;
      var shippingorder = {};
  function shipped() {
    const selected = $dg.datagrid('getChecked').filter(item => {
      return item.Status == '待发货'
    }).map(item => {
      return item.Id;
    });;
    if (selected.length > 0) {
      $.post('/PurchaseOrders/Shipped', { id: selected })
                         .done(response => {
                                if (response.success) {
                                    toastr.error(`确认发货`);
                                    reload();
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
                             $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                          });
    } else {
      $.messager.alert('提示', '请先选择要【待发货】的记录!', 'question');
    }
  }
      //下载Excel导入模板
      function downloadtemplate() {
          //默认模板路径存放位置
          const url = '/FileUpload/Download?file=/ExcelTemplate/ShippingOrder.xlsx';
          $.fileDownload(url)
           .done(() => {
                    //console.log('file download a success!');
                    toastr.success('模板下载完成!');
                })
           .fail(() => {
               $.messager.alert('下载模板失败','没有下载到导入模板[ShippingOrder.xlsx]文件!','error');
            });
       }
       //打印
       function print() {
            $dg.datagrid('print', 'DataGrid');
       }
       //执行导出下载Excel
       function exportexcel() {
                const filterRules = JSON.stringify($dg.datagrid('options').filterRules);
                //console.log(filterRules);
                $.messager.progress({ title: '正在执行导出!' });
                let formData = new FormData();
                formData.append('filterRules', filterRules);
                formData.append('sort', 'Id');
                formData.append('order', 'asc');
                $.postDownload('/ShippingOrders/ExportExcel', formData).then(res => {
                    $.messager.progress('close');
                    toastr.success('导出成功!');
                }).catch(err => {
                    //console.log(err);
                    $.messager.progress('close');
                    $.messager.alert('导出失败', err.statusText, 'error');
                });

        }
        //显示帮助信息
        function dohelp() {
            toastr.info('有问题请联系管理员 <br><i class="fa fa-envelope-o" aria-hidden="true"></i> : demo@admin.com','帮助');
        }
       var editIndex = undefined;
       //重新加载数据
       function reload() {
            if (EDITINLINE && endEditing()) {
                $dg.datagrid('uncheckAll');
                $dg.datagrid('reload');
                 $("button[name*='deletebutton']").prop('disabled', true);
                 $("button[name*='savebutton']").prop('disabled', true);
                 $("button[name*='cancelbutton']").prop('disabled', true);
            } else if (!EDITINLINE) {
                $dg.datagrid('uncheckAll');
                $dg.datagrid('reload');
                 $("button[name*='deletebutton']").prop('disabled', true);
                 $("button[name*='savebutton']").prop('disabled', true);
                 $("button[name*='cancelbutton']").prop('disabled', true);
            }
       }
      //关闭编辑状态
      function endEditing() {
            if (editIndex === undefined) {
                return true;
            }
            if ($dg.datagrid('validateRow', editIndex)) {
                $dg.datagrid('endEdit', editIndex);
                return true;
            } else {
                const invalidinput = $('input.validatebox-invalid',$dg.datagrid('getPanel'));
                const fieldnames = invalidinput.map((index, item) => {
                  return $(item).attr('placeholder') || $(item).attr('id');
                });
                $.messager.alert('提示', `${Array.from(fieldnames)} 输入有误.`, 'error');
                return false;
            }
        }
    //单击列开启编辑功能
    function onClickCell(index, field) {
        shippingorder = $dg.datagrid('getRows')[index];
        const _actions = ['action', 'ck'];
        if (!EDITINLINE || $.inArray(field, _actions) >= 0) {
                return;
        }
        if (editIndex !== index) {
            if (endEditing()) {
                $dg.datagrid('selectRow', index)
                   .datagrid('beginEdit', index);
                hook = true;
                editIndex = index;
                const ed = $dg.datagrid('getEditor', { index: index, field: field });
                if (ed) {
                        ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                }
            } else {
                $dg.datagrid('selectRow', editIndex);
            }
        }
    }
    //新增记录
    async function append() {
       shippingorder = { Status: '待发货',
ShippingDate: moment().format('YYYY-MM-DD HH:mm:ss'),
InvoiceNo: null,
ReceivedDate: null,
ClosedDate: null,
 };
        //需要后台创建对象
       if (REQUIRBACKEND) {
         shippingorder = await $.get('/ShippingOrders/NewItem');
       }
        if (!EDITINLINE) {
           //弹出新增窗口
           openshippingorderdetailwindow(shippingorder, 'Added');
        } else {
            if (endEditing()) {
                //对必填字段进行默认值初始化
                $dg.datagrid('insertRow',
                              {
                                  index: 0,
                                  row: shippingorder
                               });
                editIndex = 0;
                $dg.datagrid('selectRow', editIndex)
                    .datagrid('beginEdit', editIndex);
                hook = true;
            }
        }
    }
    //删除编辑的行
    function removeit() {
       if (EDITINLINE) {
          if (editIndex !== undefined) {
             $dg.datagrid('cancelEdit', editIndex)
                .datagrid('deleteRow', editIndex);
               editIndex = undefined;
               hook = true;
               $("button[name*='savebutton']").prop('disabled', false);
               $("button[name*='cancelbutton']").prop('disabled', false);
           }else{
              const rows = $dg.datagrid('getChecked');
              rows.slice().reverse().forEach(row => {
                const rowindex = $dg.datagrid('getRowIndex', row);
                $dg.datagrid('deleteRow', rowindex);
                hook = true;
                $("button[name*='savebutton']").prop('disabled', false);
                $("button[name*='cancelbutton']").prop('disabled', false);
            });
           }
        } else {
          deletechecked();
        }
    }
  //删除该行
  function deleteRow(id) {
    $.messager.confirm('确认', '你确定要删除该记录?', result => {
      if (result) {
        dodeletechecked([id]);
      }
     });
  }
    //删除选中的行
    function deletechecked() {
        const id = $dg.datagrid('getChecked').filter(item=>item.Id!=null && item.Id > 0).map(item => {
                   return item.Id;
                });;
        if (id.length > 0) {
           $.messager.confirm('确认', `你确定要删除这 <span class='badge bg-color-red'>${id.length} </span> 行记录?`, result => {
                if (result) {
                    dodeletechecked(id);
                    }
                });
         } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
         }
     }
    //执行删除
    function dodeletechecked(id){
       $.post('/PurchaseOrders/DeleteShippingOrders', { id: id })
                         .done(response => {
                                if (response.success) {
                                    toastr.error(`成功删除[${id.length}]行记录`);
                                    reload();
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
                             $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                          });
    }
    //提交保存后台数据库
    function accept() {
      if (endEditing()) {
        if ($dg.datagrid('getChanges').length > 0) {
          const inserted = $dg.datagrid('getChanges', 'inserted').map(item => {
          item.TrackingState = 1;
          return item;
        });
        const updated = $dg.datagrid('getChanges', 'updated').map(item => {
          item.TrackingState = 2
          return item;
        });
        const deleted = $dg.datagrid('getChanges', 'deleted').map(item => {
          item.TrackingState = 3
          return item;
        });
        //过滤已删除的重复项
        const changed = inserted.concat(updated.filter(item => {
            return !deleted.includes(item);
          })).concat(deleted);
        //console.table(changed);
        $.messager.progress({ title: '请等待', msg: '正在保存数据...', interval:200});
        $.post('/ShippingOrders/SaveData', {shippingorders:changed})
                     .done(response => {
                     $.messager.progress('close');
                           //console.log(response);
                           if (response.success) {
                               toastr.success('保存成功');
                               $dg.datagrid('acceptChanges');
                               reload();
                               hook = false;
                           } else {
                               $.messager.alert('错误', response.err ,'error');
                           }
                        })
                      .fail((jqXHR, textStatus, errorThrown) => {
                        $.messager.progress('close');
                        $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                      });
                }
            }
    }
    function reject() {
        $dg.datagrid('rejectChanges');
        editIndex = undefined;
        hook = false;
    }
    function getChanges() {
        const rows = $dg.datagrid('getChanges');
        //console.log(rows.length + ' rows are changed!');
    }
    //弹出明细信息
    async function showdetailswindow(id,index) {
        const shippingorder = $dg.datagrid('getRows')[index];
        openbiddingdetailwindow(shippingorder);
    }

    //初始化定义datagrid
    var $dg = $('#shippingorders_datagrid');
  $(() => {
    //定义datagrid结构
    $dg.datagrid({
      rownumbers: true,
      checkOnSelect: false,
      selectOnCheck: false,
      idField: 'Id',
      sortName: 'Id',
      sortOrder: 'desc',
      remoteFilter: true,
      singleSelect: false,
      url: '/ShippingOrders/GetMeData',
      method: 'get',
      clientPaging: false,
      pagination: true,
      striped: true,
      pageList: [10, 20, 50, 100, 500],
      onHeaderContextMenu: function (e, field) {
        e.preventDefault();
        $(this).datagrid('columnMenu').menu('show', {
          left: e.pageX,
          top: e.pageY
        });
      },
      onBeforeLoad: function () {
        //datagrid resize when jarvisWidgets resized.
        const that = $(this);
        $(window).on("resize.jarvisWidgets", () => {
          that.datagrid('resize');
        })
      },
      onLoadSuccess: function (data) {
        editIndex = undefined;
        $('[data-toggle="tooltip"]').tooltip();
      },
      onCheck: function () {
        $("button[name*='deletebutton']").prop('disabled', false);
      },
      onUncheck: function () {
        const checked = $(this).datagrid('getChecked').length > 0;
        $("button[name*='deletebutton']").prop('disabled', !checked);
      },
      onSelect: function (index, row) {
        shippingorder = row;
      },
      onBeginEdit: function (index, row) {
        //const editors = $(this).datagrid('getEditors', index);

      },
      onEndEdit: function (index, row) {

      },
      onBeforeEdit: function (index, row) {
        editIndex = index;
        row.editing = true;
        $("button[name*='deletebutton']").prop('disabled', false);
        $("button[name*='cancelbutton']").prop('disabled', false);
        $("button[name*='savebutton']").prop('disabled', false);
        $(this).datagrid('refreshRow', index);
      },
      onAfterEdit: function (index, row) {
        row.editing = false;
        editIndex = undefined;
        $(this).datagrid('refreshRow', index);
      },
      onCancelEdit: function (index, row) {
        row.editing = false;
        editIndex = undefined;
        $("button[name*='deletebutton']").prop('disabled', true);
        $("button[name*='savebutton']").prop('disabled', true);
        $("button[name*='cancelbutton']").prop('disabled', true);
        $(this).datagrid('refreshRow', index);
      },
      frozenColumns: [[
        /*开启CheckBox选择功能*/
        { field: 'ck', checkbox: true },
        {
          field: 'action',
          title: '@Html.L("Command")',
          width: 55,
          sortable: false,
          resizable: true,
          formatter: function showdetailsformatter(value, row, index) {
            if (row.Status == '待发货') {
              return `<div class="btn-group">\
                         <button onclick="showdetailswindow('${row.Id}',  ${index})" class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="right" title="@Html.L("EditDetail")" ><i class="fa fa-pencil-square-o"></i> </button>\
                         <button onclick="deleteRow('${row.Id}',  ${index})" class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="right" title="删除" ><i class="fa fa-trash"></i> </button>\
                      </div>`;
            } else {
              return `<div class="btn-group">\
                         <button onclick="showdetailswindow('${row.Id}',  ${index})" class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="right" title="查看" ><i class="fa fa-list"></i> </button>\
                      </div>`;
            }

          }
        }
      ]],
       columns: [[
        { /*Id*/
          field: 'Id',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Id)</span>',
          width: 120,
          sortable: true,
          resizable: true,
          hidden: true
        },
        {    /*出货单号*/
          field: 'SO',
          title: '<span class="required">@Html.DisplayNameFor(model => model.SO)</span>',
          width: 120,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.SO)', required: true, validType: 'length[0,20]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*状态*/
          field: 'Status',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Status)</span>',
          width: 80,
          align: 'right',
          hidden: false,
          editor: {
            /*需要在键值对中维护status枚举值并生成JavaScript才能使用*/
            type: 'statuseditor',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Status)',
              required: true
            }
          },
          formatter: statusformatter
        },
        {   /*发货日期*/
          field: 'ShippingDate',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ShippingDate)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ShippingDate)', required: true }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },
        {    /*送货地址*/
          field: 'DeliveryAddress',
          title: '@Html.DisplayNameFor(model => model.DeliveryAddress)',
          width: 260,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.DeliveryAddress)', required: false, validType: 'length[0,200]' }
          },
          sortable: true,
          resizable: true
        },
        @*{    /*业务联系人*/
          field: 'Buyer',
          title: '@Html.DisplayNameFor(model => model.Buyer)',
          width: 100,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.Buyer)', required: false, validType: 'length[0,20]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*联系人电话*/
          field: 'BuyerPhone',
          title: '@Html.DisplayNameFor(model => model.BuyerPhone)',
          width: 120,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.BuyerPhone)', required: false, validType: 'length[0,50]' }
          },
          sortable: true,
          resizable: true
        },*@
        {    /*总件数*/
          field: 'Packages',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Packages)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Packages)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*总金额*/
          field: 'TotalAmount',
          title: '<span class="required">@Html.DisplayNameFor(model => model.TotalAmount)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.TotalAmount)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*发票号*/
          field: 'InvoiceNo',
          title: '@Html.DisplayNameFor(model => model.InvoiceNo)',
          width: 200,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.InvoiceNo)', required: false, validType: 'length[0,50]' }
          },
          sortable: true,
          resizable: true
        },
        {    /*开票金额*/
          field: 'InvoiceAmount',
          title: '<span class="required">@Html.DisplayNameFor(model => model.InvoiceAmount)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.InvoiceAmount)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*税点*/
          field: 'TaxRate',
          title: '<span class="required">@Html.DisplayNameFor(model => model.TaxRate)</span>',
          width: 100,
          align: 'right',
          hidden: true,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.TaxRate)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*税金*/
          field: 'Tax',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Tax)</span>',
          width: 100,
          align: 'right',
          hidden: true,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Tax)',
              required: true,
              precision: 2,

            }
          },
          formatter: numberformatter,
          sortable: true,
          resizable: true
        },
        {    /*备注*/
          field: 'Remark',
          title: '@Html.DisplayNameFor(model => model.Remark)',
          width: 260,
          hidden: false,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.Remark)', required: false, validType: 'length[0,200]' }
          },
          sortable: true,
          resizable: true
        },
        {   /*收货日期*/
          field: 'ReceivedDate',
          title: '@Html.DisplayNameFor(model => model.ReceivedDate)',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ReceivedDate)', required: false }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },
        {   /*结案日期*/
          field: 'ClosedDate',
          title: '@Html.DisplayNameFor(model => model.ClosedDate)',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'datebox',
            options: { prompt: '@Html.DisplayNameFor(model => model.ClosedDate)', required: false }
          },
          formatter: dateformatter,
          sortable: true,
          resizable: true
        },
        {    /*发货人*/
          field: 'UserName',
          title: '@Html.DisplayNameFor(model => model.UserName)',
          width: 120,
          hidden: true,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.UserName)', required: false, validType: 'length[0,20]' }
          },
          sortable: true,
          resizable: true
        },
        {     /*供应商ID*/
          field: 'SupplierId',
          title: '<span class="required">@Html.DisplayNameFor(model => model.SupplierId)</span>',
          width: 100,
          align: 'right',
          hidden: true,
          editor: {
            type: 'numberspinner',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.SupplierId)',
              required: true,

            }
          },
          formatter: intformatter,
          sortable: true,
          resizable: true
        },
        {    /*供应商*/
          field: 'SupplierName',
          title: '@Html.DisplayNameFor(model => model.SupplierName)',
          width: 200,
          hidden: true,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.SupplierName)', required: false, validType: 'length[0,50]' }
          },
          sortable: true,
          resizable: true
        },
      ]]
    });

    $dg.datagrid('enableFilter', [
      /*需要在键值队维护好status枚举值*/
      {  /*状态*/
        field: 'Status',
        type: 'shipstatusfilter',
        options: {

        }
      },
      {   /*Id*/
        field: 'Id',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*总件数*/
        field: 'Packages',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*总金额*/
        field: 'TotalAmount',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*开票金额*/
        field: 'InvoiceAmount',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*税点*/
        field: 'TaxRate',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*税金*/
        field: 'Tax',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {   /*供应商ID*/
        field: 'SupplierId',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {     /*发货日期*/
        field: 'ShippingDate',
        type: 'dateRange',
        options: {
        }
      },
      {     /*收货日期*/
        field: 'ReceivedDate',
        type: 'dateRange',
        options: {
        }
      },
      {     /*结案日期*/
        field: 'ClosedDate',
        type: 'dateRange',
        options: {
        }
      },
    ]);
  });
 
</script>



}


