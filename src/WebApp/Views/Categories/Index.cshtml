@model WebApp.Models.Category
@{
    ViewBag.Title = "采购类别";
}
<!-- MAIN CONTENT -->
<div id="content">
    <!-- quick navigation bar -->
    <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-table fa-fw "></i>
                厂商管理
                <span>
                    >
                  采购类别
                </span>
            </h1>
        </div>
        <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">
            
        </div>
    </div>
    <!-- end quick navigation bar -->
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!-- row -->
        <div class="row">
            <!-- NEW WIDGET START -->
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-deletebutton="false">
                    <!-- widget options:
                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"
                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                        <h2>采购类别</h2>
                    </header>

                     <!-- widget div-->
                    <div>
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->
                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">
                            <div class="sk-spinner sk-spinner-wave">
                              <div class="sk-rect1"></div>
                              <div class="sk-rect2"></div>
                              <div class="sk-rect3"></div>
                              <div class="sk-rect4"></div>
                              <div class="sk-rect5"></div>
                            </div>
                            <div class="widget-body-toolbar">
                                <div class="row">
                                    <div class="col-sm-8  ">
                                        <!-- 开启授权控制请参考 @@if (Html.IsAuthorize("Create") -->
                                        <div class="btn-group btn-group-sm">
                                            <button onclick="reload()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Refresh")" > <i class="fa fa-refresh"></i> @Html.L("Refresh") </button>
                                        </div>
                                        <div class="btn-group btn-group-sm">
                                            <button onclick="append()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Add")"> <i class="fa fa-plus"></i> @Html.L("Add") </button>
                                        </div>
                                        <div class="btn-group btn-group-sm"   >
                                            <button name="deletebutton" disabled onclick="removeit()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Delete")" > <i class="fa fa-trash-o"></i> @Html.L("Delete") </button>
                                        </div>
                                        <div class="btn-group btn-group-sm"  >
                                            <button  name="savebutton" disabled onclick="accept()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Save")" > <i class="fa fa-floppy-o"></i> @Html.L("Save") </button>
                                        </div>
                                        <div class="btn-group btn-group-sm" >
                                            <button  name="cancelbutton" disabled onclick="reject()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Cancel")"> <i class="fa fa-times"></i> @Html.L("Cancel") </button>
                                        </div>
                                        @*<div class="btn-group btn-group-sm hidden-xs">
                                            <button type="button" onclick="importexcel('Category')" class="btn btn-default"><i class="fa fa-cloud-upload"></i> @Html.L("Import") </button>
                                            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <span class="caret"></span>
                                                <span class="sr-only">Toggle Dropdown</span>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a href="javascript:importexcel()"><i class="fa fa-file-excel-o"></i>  @Html.L("Upload") </a></li>
                                                <li role="separator" class="divider"></li>
                                                <li><a href="javascript:downloadtemplate()"><i class="fa fa-download"></i> @Html.L("Download") </a></li>
                                            </ul>
                                        </div>
                                        <div class="btn-group btn-group-sm hidden-xs hidden-md">
                                            <button onclick="exportexcel()" class="btn btn-default" data-rel="tooltip" data-placement="bottom" title="@Html.L("Export")"> <i class="fa fa-file-excel-o"></i> @Html.L("Export") </button>
                                        </div>*@
                                  
                                    </div>
                                    <div class="col-sm-4 text-align-right visible-lg-inline-block">
                                        <div class="btn-group btn-group-sm">
                                            <button onclick="window.history.back()" class="btn btn-sm btn-success" data-rel="tooltip" data-placement="bottom" title="@Html.L("GoBack")"> <i class="fa fa-chevron-left"></i> @Html.L("GoBack") </button>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="alert alert-warning no-margin fade in">
                                <button class="close" data-dismiss="alert">
                                    ×
                                </button>
                                <i class="fa-fw fa fa-info"></i>
                                注意事项:
                            </div>
                            <!--begin datagrid-content -->
                            <div class="table-responsive">
                                 <table id="categories_datagrid">  
                                 </table>
                            </div>
                            <!--end datagrid-content -->
                         </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->
                </div>
                <!-- end widget -->
            </article>
            <!-- WIDGET END -->
        </div>
        <!-- end row -->
    </section>
    <!-- end widget grid -->
    <!-- file upload partial view -->
    <!-- RenderPartial() does exactly the same thing and is better for performance over Partial() -->
    @{ Html.RenderPartial("_ImportWindow",new ViewDataDictionary {{ "EntityName","Category" }}); }		 
    <!-- end file upload partial view -->
    <!-- detail popup window -->
    @{ Html.RenderPartial("_PopupDetailFormView",new WebApp.Models.Category()); }
    <!-- end detail popup window -->
            
</div>
<!-- END MAIN CONTENT -->

@section styles{
  <link rel="stylesheet" href="@Fingerprint.Tag("/scripts/easyui/themes/insdep/easyui.css")" />
  <link rel="stylesheet" href="@Fingerprint.Tag("/Scripts/easyui/themes/insdep/icon.css")" />
  <link rel="stylesheet" href="@Fingerprint.Tag("/Scripts/plugin/toastr/toastr.min.css")" />
  <link rel="stylesheet" href="@Fingerprint.Tag("/Scripts/plugin/daterangepicker/daterangepicker.css")" />
  <link rel="stylesheet" href="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/font/font-fileuploader.css")" />
  <link rel="stylesheet" href="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/jquery.fileuploader.min.css")" />
  <link rel="stylesheet" href="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/jquery.fileuploader-theme-dragdrop.css")" />
}
@section Scripts {
  <script src="@Fingerprint.Tag("/Scripts/plugin/daterangepicker/daterangepicker.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/jquery.easyui.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/datagrid-filter.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/columns-ext.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/columns-reset.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.easyui.component.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.extend.formatter.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/locale/easyui-lang-zh_CN.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/jquery.fileuploader.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/filesaver/FileSaver.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/filesaver/jquery.fileDownload.js")"></script>
<script type="text/javascript">
      //是否强制从后台取值
      const REQUIRBACKEND = false;
      //是否开启行内编辑
      const EDITINLINE = true;
      var category = {};
      
      //下载Excel导入模板
      function downloadtemplate() {
          //默认模板路径存放位置
          const url = '/FileUpload/Download?file=/ExcelTemplate/Category.xlsx';
          $.fileDownload(url)
           .done(() => {
                    //console.log('file download a success!');
                    toastr.success('模板下载完成!');  
                })
           .fail(() => {
               $.messager.alert('下载模板失败','没有下载到导入模板[Category.xlsx]文件!','error'); 
            });           
       }
       //打印
       function print() {
            $dg.datagrid('print', 'DataGrid');
       }
       //执行导出下载Excel
       function exportexcel() {
                const filterRules = JSON.stringify($dg.datagrid('options').filterRules);
                //console.log(filterRules);
                $.messager.progress({ title: '正在执行导出!' });
                let formData = new FormData();
                formData.append('filterRules', filterRules);
                formData.append('sort', 'Id');
                formData.append('order', 'asc');
                $.postDownload('/Categories/ExportExcel', formData).then(res => {
                    $.messager.progress('close');
                    toastr.success('导出成功!');
                }).catch(err => {
                    //console.log(err);
                    $.messager.progress('close');
                    $.messager.alert('导出失败', err.statusText, 'error');
                });

        }
        //显示帮助信息
        function dohelp() {
            toastr.info('有问题请联系管理员 <br><i class="fa fa-envelope-o" aria-hidden="true"></i> : demo@admin.com','帮助');  
        }
       var editIndex = undefined;
       //重新加载数据
       function reload() {
            $dg.datagrid('unselectAll');
            $dg.datagrid('uncheckAll');
            $dg.datagrid('reload');
       }
      //关闭编辑状态
      function endEditing() {
            if (editIndex === undefined) { 
                return true; 
            }
            if ($dg.datagrid('validateRow', editIndex)) {
                $dg.datagrid('endEdit', editIndex);
                return true;
            } else {
                const invalidinput = $('input.validatebox-invalid',$dg.datagrid('getPanel'));
                const fieldnames = invalidinput.map((index, item) => {
                  return $(item).attr('placeholder') || $(item).attr('id');
                });
                $.messager.alert('提示', `${Array.from(fieldnames)} 输入有误.`, 'error');
                return false;
            }
        }
    //单击列开启编辑功能
    function onClickCell(index, field) {
        category = $dg.datagrid('getRows')[index];
        const _actions = ['action', 'ck'];
        if (!EDITINLINE || $.inArray(field, _actions) >= 0) {
                return;
        }
        if (editIndex !== index) {
            if (endEditing()) {
                $dg.datagrid('selectRow', index)
                   .datagrid('beginEdit', index);
                hook = true;
                editIndex = index;
                const ed = $dg.datagrid('getEditor', { index: index, field: field });
                if (ed) {
                        ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                }
            } else {
                $dg.datagrid('selectRow', editIndex);
            }
        }
    }
    //新增记录
    async function append() {
       category = {  };
        //需要后台创建对象
       if (REQUIRBACKEND) {
         category = await $.get('/Categories/NewItem');
       }
        if (!EDITINLINE) {
           //弹出新增窗口
           opencategorydetailwindow(category, 'Added');
        } else {
            if (endEditing()) {
                //对必填字段进行默认值初始化
                $dg.datagrid('insertRow', 
                              {   
                                  index: 0,
                                  row: category
                               });
                editIndex = 0;
                $dg.datagrid('selectRow', editIndex)
                    .datagrid('beginEdit', editIndex);
                hook = true;
            }
        }
    }
    //删除编辑的行
    function removeit() {
       if (EDITINLINE) {
          if (editIndex !== undefined) { 
             $dg.datagrid('cancelEdit', editIndex)
                .datagrid('deleteRow', editIndex);
               editIndex = undefined;
               hook = true;
               $("button[name*='deletebutton']").prop('disabled', false);
               $("button[name*='cancelbutton']").prop('disabled', false);
           }else{
              const rows = $dg.datagrid('getChecked');
              rows.slice().reverse().forEach(row => {
                const rowindex = $dg.datagrid('getRowIndex', row);
                $dg.datagrid('deleteRow', rowindex);
                hook = true;
               $("button[name*='deletebutton']").prop('disabled', false);
               $("button[name*='cancelbutton']").prop('disabled', false);
            });
           }
        } else {
          deletechecked();
        }
    }
  //删除该行
  function deleteRow(id) {
    $.messager.confirm('确认', '你确定要删除该记录?', result => {
      if (result) {
        dodeletechecked([id]);
      }
     });  
  }
    //删除选中的行
    function deletechecked() {
        const id = $dg.datagrid('getChecked').filter(item=>item.Id!=null && item.Id > 0).map(item => {
                   return item.Id;
                });;
        if (id.length > 0) {
           $.messager.confirm('确认', `你确定要删除这 <span class='badge bg-color-red'>${id.length} </span> 行记录?`, result => {
                if (result) {
                    dodeletechecked(id);
                    }
                });  
         } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
         }
     }
    //执行删除
    function dodeletechecked(id){
       $.post('/Categories/DeleteChecked', { id: id })
                         .done(response => {
                                if (response.success) {
                                    toastr.error(`成功删除[${id.length}]行记录`);  
                                    reload();
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
                             $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                          });
    }
    //提交保存后台数据库
    function accept() {
      if (endEditing()) {
        if ($dg.datagrid('getChanges').length > 0) {
          const inserted = $dg.datagrid('getChanges', 'inserted').map(item => {
          item.TrackingState = 1;
          return item;
        });
        const updated = $dg.datagrid('getChanges', 'updated').map(item => {
          item.TrackingState = 2
          return item;
        });
        const deleted = $dg.datagrid('getChanges', 'deleted').map(item => {
          item.TrackingState = 3
          return item;
        });
        //过滤已删除的重复项
        const changed = inserted.concat(updated.filter(item => {
            return !deleted.includes(item);
          })).concat(deleted);
        //console.table(changed);
        $.messager.progress({ title: '请等待', msg: '正在保存数据...', interval:200});
        $.post('/Categories/SaveData', {categories:changed})
                     .done(response => {
                     $.messager.progress('close');
                           //console.log(response);
                           if (response.success) {
                               toastr.success('保存成功');  
                               $dg.datagrid('acceptChanges');
                               reload();
                               hook = false;
                           } else {
                               $.messager.alert('错误', response.err ,'error');
                           }
                        })
                      .fail((jqXHR, textStatus, errorThrown) => {
                        $.messager.progress('close');
                        $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                      });
                }
            }
    }
    function reject() {
        $dg.datagrid('rejectChanges');
        editIndex = undefined;
        hook = false;
    }
    function getChanges() {
        const rows = $dg.datagrid('getChanges');
        //console.log(rows.length + ' rows are changed!');
    }
    //弹出明细信息
    async function showdetailswindow(id,index) {
        const category = $dg.datagrid('getRows')[index];
        if (REQUIRBACKEND) {
           category = await $.get('/Categories/GetItem/' + id);
        }
        opencategorydetailwindow(category,'Modified');
    }

    //初始化定义datagrid
    var $dg = $('#categories_datagrid');
    $(() => {
        //定义datagrid结构
       $dg.datagrid({
                        //fit: false,
                        //height: window.innerHeight - 385,
                        rownumbers:true,
                        checkOnSelect:false,
                        selectOnCheck:false,
                        idField:'Id',
                        sortName:'Id',
                        sortOrder:'desc',
                        remoteFilter: true,
                        singleSelect: true,
                        //url: '/Categories/GetData',
                        method: 'get',
                        onClickCell: onClickCell,
                        pagination: true,
                        clientPaging:false,
                        striped:true,
                        pageList: [10, 20, 50, 100, 500,2000],
                        filterRules: [],
                        onHeaderContextMenu: function (e, field) {
                           e.preventDefault();
                           $(this).datagrid('columnMenu').menu('show', {
                             left: e.pageX,
                             top: e.pageY
                           });
                        },
                        onBeforeLoad: function () {
                           //datagrid resize when jarvisWidgets resized.
                           const that = $(this);
                           $(window).on("resize.jarvisWidgets", () => {
                               that.datagrid('resize');
                           })
                         },
                         onLoadSuccess: function (data) {
                            editIndex = undefined;
                            $('[data-toggle="tooltip"]').tooltip();
                        },
                        onCheck: function () {
                          $("button[name*='deletebutton']").prop('disabled', false);
                        },
                        onUncheck: function () {
                           const checked = $(this).datagrid('getChecked').length > 0;
                           $("button[name*='deletebutton']").prop('disabled', !checked);
                        },
                        onSelect: function(index,row) {
                           category = row;
                        },
                        onBeginEdit: function (index, row) {
                          //const editors = $(this).datagrid('getEditors', index);
                          
                         },
                        onEndEdit: function (index, row) {
                       
                         },
                         onBeforeEdit: function (index, row) {
                            editIndex = index;
                            row.editing = true;
                            $("button[name*='deletebutton']").prop('disabled', false);
                            $("button[name*='cancelbutton']").prop('disabled', false);
                            $("button[name*='savebutton']").prop('disabled', false);
                            $(this).datagrid('refreshRow', index);
                          },
                          onAfterEdit: function (index, row) {
                            row.editing = false;
                            editIndex = undefined;
                            $(this).datagrid('refreshRow', index);
                           },
                           onCancelEdit: function (index, row) {
                             row.editing = false;
                             editIndex = undefined;
                             $("button[name*='deletebutton']").prop('disabled', true);
                             $("button[name*='savebutton']").prop('disabled', true);
                             $("button[name*='cancelbutton']").prop('disabled', true);
                             $(this).datagrid('refreshRow', index);
                         },
                        frozenColumns: [[
                         /*开启CheckBox选择功能*/
                         { field: 'ck', checkbox: true },
                         { 
                            field: 'action',
                            title:'@Html.L("Command")',
                            width: 85,
                            sortable: false,
                            resizable: true,
                            formatter: function showdetailsformatter(value, row, index) {
                                         if (!row.editing) {
                                            return `<div class="btn-group">\
                                                         <button onclick="deleteRow('${row.Id}',${index})" class="btn btn-default btn-xs" data-toggle="tooltip" data-placement="right" title="@Html.L("Delete")" ><i class="fa fa-trash-o"></i> </button>\
                                                    </div>`;
                                         } else {
                                             return `<button class="btn btn-default btn-xs" disabled title="查看明细"  ><i class="fa fa-pencil-square-o"></i> </button>`;
                                         }
                                     }
                          }
                        ]],
                        columns: [[

            {    /*采购单类别*/
                 field:'Name', 
                 title:'<span class="text-danger">*</span>@Html.DisplayNameFor(model => model.Name)', 
                 width:260,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Name)',required:true, validType: 'length[0,128]' }  
                       },
                 sortable:true,
                 resizable:true 
            },
            {    /*备注*/
                 field:'Remark', 
                 title:'@Html.DisplayNameFor(model => model.Remark)', 
                 width:260,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Remark)',required:false, validType: 'length[0,128]' }  
                       },
                 sortable:true,
                 resizable:true 
            },
           {     /*合格供应商数*/
                 field:'AllowSuppliers', 
                 title:'<span class="text-danger">*</span>@Html.DisplayNameFor(model => model.AllowSuppliers)', 
                 width:130, 
                 align:'right',
                 hidden:false,
                sortable:true,
                resizable:true 
            },
                 ]]
           })
             .datagrid('enableFilter',[
                {   /*主键*/
                      field: 'Id',
                      type: 'numberbox',
                      op:['equal','notequal','less','lessorequal','greater','greaterorequal']
                  },
                {   /*合格供应商数*/
                      field: 'AllowSuppliers',
                      type: 'numberbox',
                      op:['equal','notequal','less','lessorequal','greater','greaterorequal']
                  },
           ])
           .datagrid('load', '/Categories/GetData');
     });
 
</script>



}

 
